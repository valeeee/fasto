local
type t__1__ = (int*int)
type t__2__ = (int*int)
type t__3__ = (int*int)
type t__4__ = (int*int)
type t__5__ = (int*int)
type t__6__ = (int*int)
type t__7__ = char*(int*int)
type t__8__ = (int*int)
type t__9__ = (int*int)
type t__10__ = (int*int)
type t__11__ = (int*int)
type t__12__ = (int*int)
type t__13__ = (int*int)
type t__14__ = (int*int)
type t__15__ = (int*int)
type t__16__ = (int*int)
type t__17__ = (int*int)
type t__18__ = string*(int*int)
type t__19__ = (int*int)
type t__20__ = (int*int)
type t__21__ = (int*int)
type t__22__ = (int*int)
type t__23__ = (int*int)
type t__24__ = (int*int)
type t__25__ = (int*int)
type t__26__ = (int*int)
type t__27__ = (int*int)
type t__28__ = (int*int)
type t__29__ = (int*int)
type t__30__ = (int*int)
type t__31__ = (int*int)
type t__32__ = int*(int*int)
type t__33__ = (int*int)
type t__34__ = (int*int)
type t__35__ = (int*int)
type t__36__ = (int*int)
type t__37__ = (int*int)
type t__38__ = (int*int)
type t__39__ = (int*int)
type t__40__ = (int*int)
type t__41__ = (int*int)
type t__42__ = (int*int)
type t__43__ = string*(int*int)
type t__44__ = (int*int)
type t__45__ = (int*int)
type t__46__ = (int*int)
type t__47__ = (int*int)
in
datatype token =
    AND of t__1__
  | APPEND of t__2__
  | ARR of t__3__
  | BAR of t__4__
  | BOOL of t__5__
  | CHAR of t__6__
  | CHARLIT of t__7__
  | COMMA of t__8__
  | DEQ of t__9__
  | DIVIDE of t__10__
  | ELSE of t__11__
  | EOF of t__12__
  | EQ of t__13__
  | FALSE of t__14__
  | FILTER of t__15__
  | FN of t__16__
  | FUN of t__17__
  | ID of t__18__
  | IF of t__19__
  | IN of t__20__
  | INT of t__21__
  | IOTA of t__22__
  | LBRACKET of t__23__
  | LCURLY of t__24__
  | LET of t__25__
  | LPAR of t__26__
  | LTH of t__27__
  | MAP of t__28__
  | MINUS of t__29__
  | NEG of t__30__
  | NOT of t__31__
  | NUM of t__32__
  | OP of t__33__
  | OR of t__34__
  | PLUS of t__35__
  | RBRACKET of t__36__
  | RCURLY of t__37__
  | READ of t__38__
  | REDUCE of t__39__
  | REPLICATE of t__40__
  | RPAR of t__41__
  | SCAN of t__42__
  | STRINGLIT of t__43__
  | THEN of t__44__
  | TIMES of t__45__
  | TRUE of t__46__
  | WRITE of t__47__
end;

open Obj Parsing;
prim_val vector_ : int -> 'a -> 'a Vector.vector = 2 "make_vect";
prim_val update_ : 'a Vector.vector -> int -> 'a -> unit = 3 "set_vect_item";


(* A parser definition for Fasto, for use with mosmlyac. *)

open Fasto
open Fasto.UnknownTypes

(* Line 12, file Parser.sml *)
val yytransl = #[
  257 (* AND *),
  258 (* APPEND *),
  259 (* ARR *),
  260 (* BAR *),
  261 (* BOOL *),
  262 (* CHAR *),
  263 (* CHARLIT *),
  264 (* COMMA *),
  265 (* DEQ *),
  266 (* DIVIDE *),
  267 (* ELSE *),
  268 (* EOF *),
  269 (* EQ *),
  270 (* FALSE *),
  271 (* FILTER *),
  272 (* FN *),
  273 (* FUN *),
  274 (* ID *),
  275 (* IF *),
  276 (* IN *),
  277 (* INT *),
  278 (* IOTA *),
  279 (* LBRACKET *),
  280 (* LCURLY *),
  281 (* LET *),
  282 (* LPAR *),
  283 (* LTH *),
  284 (* MAP *),
  285 (* MINUS *),
  286 (* NEG *),
  287 (* NOT *),
  288 (* NUM *),
  289 (* OP *),
  290 (* OR *),
  291 (* PLUS *),
  292 (* RBRACKET *),
  293 (* RCURLY *),
  294 (* READ *),
  295 (* REDUCE *),
  296 (* REPLICATE *),
  297 (* RPAR *),
  298 (* SCAN *),
  299 (* STRINGLIT *),
  300 (* THEN *),
  301 (* TIMES *),
  302 (* TRUE *),
  303 (* WRITE *),
    0];

val yylhs = "\255\255\
\\001\000\002\000\002\000\003\000\003\000\004\000\004\000\004\000\
\\004\000\005\000\005\000\009\000\009\000\009\000\009\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\\006\000\006\000\006\000\010\000\011\000\011\000\007\000\007\000\
\\008\000\008\000\008\000\000\000";

val yylen = "\002\000\
\\002\000\003\000\002\000\007\000\006\000\001\000\001\000\001\000\
\\003\000\004\000\002\000\001\000\001\000\001\000\001\000\001\000\
\\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\\003\000\003\000\002\000\002\000\003\000\003\000\003\000\003\000\
\\006\000\004\000\003\000\003\000\004\000\004\000\004\000\006\000\
\\006\000\006\000\008\000\008\000\009\000\009\000\003\000\006\000\
\\004\000\007\000\005\000\005\000\003\000\001\000\003\000\001\000\
\\001\000\006\000\007\000\002\000";

val yydefred = "\000\000\
\\000\000\000\000\000\000\060\000\000\000\007\000\008\000\006\000\
\\000\000\000\000\000\000\001\000\000\000\002\000\000\000\009\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
\\021\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\000\000\000\000\000\057\000\000\000\000\000\036\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\022\000\000\000\047\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\049\000\034\000\000\000\039\000\000\000\
\\000\000\000\000\055\000\000\000\000\000\037\000\015\000\013\000\
\\012\000\014\000\000\000\000\000\000\000\000\000\000\000\038\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\051\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\042\000\000\000\000\000\053\000\000\000\000\000\041\000\000\000\
\\000\000\040\000\000\000\000\000\000\000\000\000\000\000\050\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\\043\000\000\000\044\000\000\000\045\000\046\000";

val yydgoto = "\002\000\
\\004\000\005\000\010\000\019\000\020\000\080\000\053\000\077\000\
\\123\000\113\000\114\000";

val yysindex = "\027\000\
\\012\255\000\000\010\255\000\000\055\255\000\000\000\000\000\000\
\\010\255\012\255\014\255\000\000\042\255\000\000\056\255\000\000\
\\000\255\067\255\066\255\050\255\189\002\089\255\094\255\000\000\
\\000\000\079\255\252\254\189\002\085\255\189\002\091\255\189\002\
\\086\255\189\002\189\002\000\000\087\255\088\255\090\255\097\255\
\\000\000\000\000\098\255\168\001\010\255\189\002\052\255\189\002\
\\159\002\129\255\189\002\054\255\081\255\115\255\020\000\052\255\
\\000\000\063\255\010\255\002\255\189\002\021\255\189\002\189\002\
\\189\002\189\002\189\002\189\002\189\002\189\002\189\002\189\002\
\\000\000\168\001\010\255\000\000\117\255\057\000\000\000\061\000\
\\093\255\189\002\098\000\103\255\189\002\000\000\189\002\000\000\
\\125\255\107\255\112\255\141\255\102\000\112\255\147\255\139\000\
\\063\255\007\255\024\255\000\000\024\255\007\255\092\255\007\255\
\\000\000\134\255\189\002\000\000\000\000\143\000\000\000\143\255\
\\157\255\255\254\000\000\180\000\189\002\000\000\000\000\000\000\
\\000\000\000\000\158\255\189\002\189\002\159\255\189\002\000\000\
\\190\255\192\000\189\002\160\255\103\255\189\002\000\000\189\002\
\\195\000\189\002\233\000\245\000\189\002\248\000\167\255\131\255\
\\000\000\168\001\189\002\000\000\138\255\168\001\000\000\030\001\
\\189\002\000\000\034\001\189\002\189\002\177\255\071\001\000\000\
\\189\002\084\001\189\002\113\001\168\001\189\002\000\000\126\001\
\\000\000\155\001\000\000\168\001\000\000\000\000";

val yyrindex = "\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\173\255\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\152\255\000\000\000\000\
\\000\000\000\000\142\255\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\062\255\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\161\255\000\000\000\000\000\000\000\000\
\\180\255\104\002\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\083\255\000\000\000\000\000\000\000\000\000\000\227\254\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\135\002\197\001\055\002\218\255\086\002\235\001\222\002\017\002\
\\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\020\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\233\002\000\000\000\000\000\000\000\003\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\186\255\000\000\000\000\000\000\
\\000\000\000\000\000\000\191\255\000\000\000\000";

val yygindex = "\000\000\
\\000\000\191\000\000\000\001\000\212\255\235\255\209\255\015\000\
\\108\000\000\000\070\000";

val YYTABLESIZE = 1068;
val yytable = "\044\000\
\\073\000\081\000\134\000\011\000\006\000\007\000\050\000\056\000\
\\052\000\013\000\055\000\056\000\057\000\058\000\006\000\007\000\
\\067\000\075\000\048\000\076\000\008\000\049\000\009\000\054\000\
\\074\000\065\000\078\000\001\000\003\000\083\000\008\000\015\000\
\\009\000\067\000\091\000\135\000\075\000\115\000\076\000\093\000\
\\018\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\\103\000\104\000\105\000\072\000\069\000\094\000\064\000\065\000\
\\054\000\084\000\071\000\090\000\110\000\085\000\066\000\067\000\
\\065\000\116\000\012\000\075\000\072\000\076\000\089\000\066\000\
\\067\000\005\000\092\000\106\000\095\000\016\000\005\000\021\000\
\\068\000\017\000\069\000\022\000\144\000\130\000\149\000\070\000\
\\071\000\068\000\023\000\069\000\064\000\065\000\004\000\137\000\
\\045\000\071\000\072\000\004\000\066\000\067\000\139\000\140\000\
\\047\000\142\000\046\000\072\000\054\000\146\000\051\000\056\000\
\\059\000\060\000\150\000\061\000\152\000\086\000\068\000\155\000\
\\069\000\119\000\062\000\063\000\107\000\159\000\071\000\087\000\
\\112\000\064\000\065\000\162\000\117\000\109\000\164\000\165\000\
\\072\000\066\000\067\000\168\000\120\000\170\000\020\000\020\000\
\\172\000\020\000\121\000\118\000\124\000\020\000\020\000\020\000\
\\020\000\020\000\127\000\068\000\122\000\069\000\020\000\129\000\
\\132\000\020\000\070\000\071\000\133\000\138\000\141\000\147\000\
\\020\000\157\000\020\000\158\000\082\000\072\000\160\000\020\000\
\\020\000\020\000\020\000\166\000\028\000\028\000\020\000\028\000\
\\003\000\020\000\020\000\028\000\028\000\028\000\028\000\028\000\
\\011\000\058\000\006\000\007\000\028\000\056\000\059\000\028\000\
\\014\000\126\000\148\000\000\000\000\000\000\000\028\000\000\000\
\\028\000\000\000\008\000\000\000\009\000\028\000\028\000\028\000\
\\028\000\000\000\026\000\026\000\028\000\026\000\000\000\028\000\
\\028\000\026\000\026\000\026\000\026\000\026\000\143\000\000\000\
\\000\000\000\000\026\000\000\000\000\000\026\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\026\000\000\000\026\000\000\000\
\\000\000\000\000\000\000\026\000\026\000\026\000\026\000\000\000\
\\000\000\000\000\026\000\000\000\000\000\026\000\026\000\025\000\
\\025\000\000\000\025\000\000\000\000\000\000\000\025\000\025\000\
\\025\000\025\000\025\000\000\000\064\000\065\000\000\000\025\000\
\\000\000\000\000\025\000\000\000\066\000\067\000\000\000\000\000\
\\000\000\025\000\000\000\025\000\000\000\000\000\000\000\000\000\
\\025\000\025\000\025\000\025\000\000\000\000\000\068\000\025\000\
\\069\000\000\000\025\000\025\000\000\000\070\000\071\000\000\000\
\\000\000\064\000\065\000\000\000\088\000\064\000\065\000\000\000\
\\072\000\066\000\067\000\000\000\085\000\066\000\067\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\068\000\000\000\069\000\000\000\068\000\
\\000\000\069\000\070\000\071\000\108\000\000\000\070\000\071\000\
\\000\000\000\000\064\000\065\000\000\000\072\000\064\000\065\000\
\\000\000\072\000\066\000\067\000\000\000\125\000\066\000\067\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\068\000\000\000\069\000\000\000\
\\068\000\000\000\069\000\070\000\071\000\000\000\000\000\070\000\
\\071\000\000\000\111\000\064\000\065\000\000\000\072\000\064\000\
\\065\000\000\000\072\000\066\000\067\000\000\000\000\000\066\000\
\\067\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\068\000\000\000\069\000\
\\000\000\068\000\000\000\069\000\070\000\071\000\000\000\000\000\
\\070\000\071\000\000\000\128\000\064\000\065\000\000\000\072\000\
\\000\000\000\000\000\000\072\000\066\000\067\000\000\000\000\000\
\\064\000\065\000\000\000\064\000\065\000\000\000\000\000\136\000\
\\066\000\067\000\000\000\066\000\067\000\000\000\068\000\000\000\
\\069\000\000\000\000\000\000\000\000\000\070\000\071\000\000\000\
\\000\000\000\000\068\000\000\000\069\000\068\000\000\000\069\000\
\\072\000\070\000\071\000\000\000\070\000\071\000\000\000\000\000\
\\145\000\064\000\065\000\151\000\072\000\000\000\000\000\072\000\
\\153\000\066\000\067\000\000\000\000\000\064\000\065\000\000\000\
\\064\000\065\000\000\000\000\000\000\000\066\000\067\000\156\000\
\\066\000\067\000\000\000\068\000\000\000\069\000\000\000\000\000\
\\000\000\000\000\070\000\071\000\000\000\000\000\000\000\068\000\
\\000\000\069\000\068\000\000\000\069\000\072\000\070\000\071\000\
\\000\000\070\000\071\000\000\000\000\000\154\000\064\000\065\000\
\\000\000\072\000\064\000\065\000\072\000\161\000\066\000\067\000\
\\000\000\163\000\066\000\067\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\068\000\000\000\069\000\000\000\068\000\000\000\069\000\070\000\
\\071\000\000\000\000\000\070\000\071\000\000\000\000\000\064\000\
\\065\000\000\000\072\000\000\000\000\000\000\000\072\000\066\000\
\\067\000\000\000\000\000\000\000\064\000\065\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\066\000\067\000\000\000\000\000\
\\000\000\068\000\000\000\069\000\000\000\000\000\000\000\000\000\
\\070\000\071\000\000\000\000\000\000\000\000\000\068\000\167\000\
\\069\000\064\000\065\000\072\000\000\000\070\000\071\000\000\000\
\\000\000\066\000\067\000\000\000\169\000\000\000\064\000\065\000\
\\072\000\000\000\000\000\000\000\000\000\000\000\066\000\067\000\
\\000\000\000\000\000\000\068\000\000\000\069\000\000\000\000\000\
\\000\000\000\000\070\000\071\000\000\000\000\000\000\000\000\000\
\\068\000\171\000\069\000\064\000\065\000\072\000\000\000\070\000\
\\071\000\000\000\000\000\066\000\067\000\000\000\173\000\000\000\
\\064\000\065\000\072\000\000\000\000\000\000\000\000\000\000\000\
\\066\000\067\000\000\000\000\000\000\000\068\000\000\000\069\000\
\\000\000\000\000\000\000\000\000\070\000\071\000\000\000\000\000\
\\000\000\000\000\068\000\174\000\069\000\035\000\035\000\072\000\
\\035\000\070\000\071\000\000\000\035\000\035\000\000\000\035\000\
\\035\000\000\000\000\000\000\000\072\000\035\000\000\000\000\000\
\\035\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\\000\000\035\000\000\000\000\000\000\000\000\000\035\000\035\000\
\\035\000\035\000\000\000\024\000\024\000\035\000\024\000\000\000\
\\035\000\000\000\024\000\024\000\000\000\024\000\024\000\000\000\
\\000\000\000\000\000\000\024\000\000\000\000\000\024\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\024\000\000\000\024\000\
\\000\000\000\000\000\000\000\000\024\000\024\000\024\000\024\000\
\\000\000\023\000\023\000\024\000\023\000\000\000\024\000\000\000\
\\023\000\023\000\000\000\023\000\023\000\000\000\000\000\000\000\
\\000\000\023\000\000\000\000\000\023\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\023\000\000\000\023\000\000\000\000\000\
\\000\000\000\000\023\000\023\000\023\000\023\000\000\000\029\000\
\\000\000\023\000\029\000\000\000\023\000\000\000\029\000\029\000\
\\000\000\029\000\029\000\000\000\000\000\000\000\000\000\029\000\
\\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\029\000\000\000\000\000\000\000\000\000\030\000\000\000\
\\029\000\030\000\029\000\029\000\000\000\030\000\030\000\029\000\
\\030\000\030\000\029\000\000\000\000\000\000\000\030\000\000\000\
\\027\000\030\000\000\000\027\000\000\000\000\000\000\000\027\000\
\\030\000\000\000\027\000\027\000\000\000\000\000\000\000\030\000\
\\027\000\030\000\030\000\027\000\000\000\000\000\030\000\000\000\
\\000\000\030\000\000\000\000\000\000\000\000\000\000\000\031\000\
\\000\000\027\000\031\000\027\000\027\000\000\000\031\000\000\000\
\\027\000\031\000\031\000\027\000\000\000\000\000\000\000\031\000\
\\000\000\000\000\031\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\
\\031\000\000\000\031\000\031\000\025\000\026\000\000\000\031\000\
\\027\000\028\000\031\000\000\000\029\000\000\000\030\000\031\000\
\\032\000\000\000\033\000\000\000\034\000\035\000\036\000\000\000\
\\000\000\000\000\000\000\024\000\037\000\038\000\039\000\079\000\
\\040\000\041\000\025\000\026\000\042\000\043\000\027\000\028\000\
\\000\000\000\000\029\000\000\000\030\000\031\000\032\000\000\000\
\\033\000\000\000\034\000\035\000\036\000\000\000\000\000\000\000\
\\000\000\032\000\037\000\038\000\039\000\032\000\040\000\041\000\
\\032\000\032\000\042\000\043\000\033\000\000\000\032\000\000\000\
\\033\000\032\000\000\000\033\000\033\000\000\000\000\000\000\000\
\\000\000\033\000\000\000\000\000\033\000\000\000\000\000\032\000\
\\000\000\032\000\032\000\048\000\000\000\000\000\032\000\048\000\
\\000\000\032\000\048\000\048\000\033\000\033\000\000\000\000\000\
\\048\000\033\000\000\000\048\000\033\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\048\000\048\000\000\000\000\000\000\000\
\\048\000\000\000\000\000\048\000";

val yycheck = "\021\000\
\\045\000\049\000\004\001\003\000\005\001\006\001\028\000\037\001\
\\030\000\009\000\032\000\041\001\034\000\035\000\005\001\006\001\
\\010\001\016\001\023\001\018\001\021\001\026\001\023\001\004\001\
\\046\000\002\001\048\000\001\000\017\001\051\000\021\001\018\001\
\\023\001\010\001\033\001\037\001\016\001\085\000\018\001\061\000\
\\041\001\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\\070\000\071\000\072\000\045\001\029\001\033\001\001\001\002\001\
\\037\001\004\001\035\001\059\000\082\000\008\001\009\001\010\001\
\\002\001\087\000\012\001\016\001\045\001\018\001\056\000\009\001\
\\010\001\012\001\060\000\075\000\062\000\036\001\017\001\013\001\
\\027\001\026\001\029\001\018\001\129\000\107\000\134\000\034\001\
\\035\001\027\001\041\001\029\001\001\001\002\001\012\001\117\000\
\\008\001\035\001\045\001\017\001\009\001\010\001\124\000\125\000\
\\026\001\127\000\013\001\045\001\018\001\131\000\026\001\026\001\
\\026\001\026\001\136\000\026\001\138\000\037\001\027\001\141\000\
\\029\001\010\001\026\001\026\001\008\001\147\000\035\001\013\001\
\\026\001\001\001\002\001\153\000\008\001\041\001\156\000\157\000\
\\045\001\009\001\010\001\161\000\029\001\163\000\001\001\002\001\
\\166\000\004\001\035\001\041\001\008\001\008\001\009\001\010\001\
\\011\001\012\001\008\001\027\001\045\001\029\001\017\001\026\001\
\\018\001\020\001\034\001\035\001\008\001\008\001\008\001\008\001\
\\027\001\003\001\029\001\041\001\044\001\045\001\037\001\034\001\
\\035\001\036\001\037\001\003\001\001\001\002\001\041\001\004\001\
\\012\001\044\001\045\001\008\001\009\001\010\001\011\001\012\001\
\\041\001\008\001\005\001\006\001\017\001\037\001\008\001\020\001\
\\010\000\094\000\133\000\255\255\255\255\255\255\027\001\255\255\
\\029\001\255\255\021\001\255\255\023\001\034\001\035\001\036\001\
\\037\001\255\255\001\001\002\001\041\001\004\001\255\255\044\001\
\\045\001\008\001\009\001\010\001\011\001\012\001\041\001\255\255\
\\255\255\255\255\017\001\255\255\255\255\020\001\255\255\255\255\
\\255\255\255\255\255\255\255\255\027\001\255\255\029\001\255\255\
\\255\255\255\255\255\255\034\001\035\001\036\001\037\001\255\255\
\\255\255\255\255\041\001\255\255\255\255\044\001\045\001\001\001\
\\002\001\255\255\004\001\255\255\255\255\255\255\008\001\009\001\
\\010\001\011\001\012\001\255\255\001\001\002\001\255\255\017\001\
\\255\255\255\255\020\001\255\255\009\001\010\001\255\255\255\255\
\\255\255\027\001\255\255\029\001\255\255\255\255\255\255\255\255\
\\034\001\035\001\036\001\037\001\255\255\255\255\027\001\041\001\
\\029\001\255\255\044\001\045\001\255\255\034\001\035\001\255\255\
\\255\255\001\001\002\001\255\255\041\001\001\001\002\001\255\255\
\\045\001\009\001\010\001\255\255\008\001\009\001\010\001\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\027\001\255\255\029\001\255\255\027\001\
\\255\255\029\001\034\001\035\001\036\001\255\255\034\001\035\001\
\\255\255\255\255\001\001\002\001\255\255\045\001\001\001\002\001\
\\255\255\045\001\009\001\010\001\255\255\008\001\009\001\010\001\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\027\001\255\255\029\001\255\255\
\\027\001\255\255\029\001\034\001\035\001\255\255\255\255\034\001\
\\035\001\255\255\041\001\001\001\002\001\255\255\045\001\001\001\
\\002\001\255\255\045\001\009\001\010\001\255\255\255\255\009\001\
\\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\027\001\255\255\029\001\
\\255\255\027\001\255\255\029\001\034\001\035\001\255\255\255\255\
\\034\001\035\001\255\255\041\001\001\001\002\001\255\255\045\001\
\\255\255\255\255\255\255\045\001\009\001\010\001\255\255\255\255\
\\001\001\002\001\255\255\001\001\002\001\255\255\255\255\020\001\
\\009\001\010\001\255\255\009\001\010\001\255\255\027\001\255\255\
\\029\001\255\255\255\255\255\255\255\255\034\001\035\001\255\255\
\\255\255\255\255\027\001\255\255\029\001\027\001\255\255\029\001\
\\045\001\034\001\035\001\255\255\034\001\035\001\255\255\255\255\
\\041\001\001\001\002\001\041\001\045\001\255\255\255\255\045\001\
\\008\001\009\001\010\001\255\255\255\255\001\001\002\001\255\255\
\\001\001\002\001\255\255\255\255\255\255\009\001\010\001\008\001\
\\009\001\010\001\255\255\027\001\255\255\029\001\255\255\255\255\
\\255\255\255\255\034\001\035\001\255\255\255\255\255\255\027\001\
\\255\255\029\001\027\001\255\255\029\001\045\001\034\001\035\001\
\\255\255\034\001\035\001\255\255\255\255\041\001\001\001\002\001\
\\255\255\045\001\001\001\002\001\045\001\008\001\009\001\010\001\
\\255\255\008\001\009\001\010\001\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\027\001\255\255\029\001\255\255\027\001\255\255\029\001\034\001\
\\035\001\255\255\255\255\034\001\035\001\255\255\255\255\001\001\
\\002\001\255\255\045\001\255\255\255\255\255\255\045\001\009\001\
\\010\001\255\255\255\255\255\255\001\001\002\001\255\255\255\255\
\\255\255\255\255\255\255\255\255\009\001\010\001\255\255\255\255\
\\255\255\027\001\255\255\029\001\255\255\255\255\255\255\255\255\
\\034\001\035\001\255\255\255\255\255\255\255\255\027\001\041\001\
\\029\001\001\001\002\001\045\001\255\255\034\001\035\001\255\255\
\\255\255\009\001\010\001\255\255\041\001\255\255\001\001\002\001\
\\045\001\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\\255\255\255\255\255\255\027\001\255\255\029\001\255\255\255\255\
\\255\255\255\255\034\001\035\001\255\255\255\255\255\255\255\255\
\\027\001\041\001\029\001\001\001\002\001\045\001\255\255\034\001\
\\035\001\255\255\255\255\009\001\010\001\255\255\041\001\255\255\
\\001\001\002\001\045\001\255\255\255\255\255\255\255\255\255\255\
\\009\001\010\001\255\255\255\255\255\255\027\001\255\255\029\001\
\\255\255\255\255\255\255\255\255\034\001\035\001\255\255\255\255\
\\255\255\255\255\027\001\041\001\029\001\001\001\002\001\045\001\
\\004\001\034\001\035\001\255\255\008\001\009\001\255\255\011\001\
\\012\001\255\255\255\255\255\255\045\001\017\001\255\255\255\255\
\\020\001\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\\255\255\029\001\255\255\255\255\255\255\255\255\034\001\035\001\
\\036\001\037\001\255\255\001\001\002\001\041\001\004\001\255\255\
\\044\001\255\255\008\001\009\001\255\255\011\001\012\001\255\255\
\\255\255\255\255\255\255\017\001\255\255\255\255\020\001\255\255\
\\255\255\255\255\255\255\255\255\255\255\027\001\255\255\029\001\
\\255\255\255\255\255\255\255\255\034\001\035\001\036\001\037\001\
\\255\255\001\001\002\001\041\001\004\001\255\255\044\001\255\255\
\\008\001\009\001\255\255\011\001\012\001\255\255\255\255\255\255\
\\255\255\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\027\001\255\255\029\001\255\255\255\255\
\\255\255\255\255\034\001\035\001\036\001\037\001\255\255\001\001\
\\255\255\041\001\004\001\255\255\044\001\255\255\008\001\009\001\
\\255\255\011\001\012\001\255\255\255\255\255\255\255\255\017\001\
\\255\255\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\\255\255\027\001\255\255\255\255\255\255\255\255\001\001\255\255\
\\034\001\004\001\036\001\037\001\255\255\008\001\009\001\041\001\
\\011\001\012\001\044\001\255\255\255\255\255\255\017\001\255\255\
\\001\001\020\001\255\255\004\001\255\255\255\255\255\255\008\001\
\\027\001\255\255\011\001\012\001\255\255\255\255\255\255\034\001\
\\017\001\036\001\037\001\020\001\255\255\255\255\041\001\255\255\
\\255\255\044\001\255\255\255\255\255\255\255\255\255\255\001\001\
\\255\255\034\001\004\001\036\001\037\001\255\255\008\001\255\255\
\\041\001\011\001\012\001\044\001\255\255\255\255\255\255\017\001\
\\255\255\255\255\020\001\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\007\001\255\255\255\255\
\\034\001\255\255\036\001\037\001\014\001\015\001\255\255\041\001\
\\018\001\019\001\044\001\255\255\022\001\255\255\024\001\025\001\
\\026\001\255\255\028\001\255\255\030\001\031\001\032\001\255\255\
\\255\255\255\255\255\255\007\001\038\001\039\001\040\001\041\001\
\\042\001\043\001\014\001\015\001\046\001\047\001\018\001\019\001\
\\255\255\255\255\022\001\255\255\024\001\025\001\026\001\255\255\
\\028\001\255\255\030\001\031\001\032\001\255\255\255\255\255\255\
\\255\255\004\001\038\001\039\001\040\001\008\001\042\001\043\001\
\\011\001\012\001\046\001\047\001\004\001\255\255\017\001\255\255\
\\008\001\020\001\255\255\011\001\012\001\255\255\255\255\255\255\
\\255\255\017\001\255\255\255\255\020\001\255\255\255\255\034\001\
\\255\255\036\001\037\001\004\001\255\255\255\255\041\001\008\001\
\\255\255\044\001\011\001\012\001\036\001\037\001\255\255\255\255\
\\017\001\041\001\255\255\020\001\044\001\255\255\255\255\255\255\
\\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\\255\255\255\255\255\255\036\001\037\001\255\255\255\255\255\255\
\\041\001\255\255\255\255\044\001";

val yyact = vector_ 61 (fn () => ((raise Fail "parser") : obj));
(* Rule 1, file Parser.grm, line 47 *)
val _ = update_ yyact 1
(fn () => repr(let
val d__1__ = peekVal 1 : Fasto.UnknownTypes.FunDec list
val d__2__ = peekVal 0 : (int*int)
in
( (d__1__) ) end : Fasto.UnknownTypes.Prog))
;
(* Rule 2, file Parser.grm, line 50 *)
val _ = update_ yyact 2
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Fasto.UnknownTypes.FunDec
val d__3__ = peekVal 0 : Fasto.UnknownTypes.FunDec list
in
( (d__2__) :: (d__3__) ) end : Fasto.UnknownTypes.FunDec list))
;
(* Rule 3, file Parser.grm, line 51 *)
val _ = update_ yyact 3
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Fasto.UnknownTypes.FunDec
in
( (d__2__) :: [] ) end : Fasto.UnknownTypes.FunDec list))
;
(* Rule 4, file Parser.grm, line 55 *)
val _ = update_ yyact 4
(fn () => repr(let
val d__1__ = peekVal 6 : Fasto.Type
val d__2__ = peekVal 5 : string*(int*int)
val d__3__ = peekVal 4 : (int*int)
val d__4__ = peekVal 3 : Fasto.Param list
val d__5__ = peekVal 2 : (int*int)
val d__6__ = peekVal 1 : (int*int)
val d__7__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( FunDec (#1 (d__2__), (d__1__), (d__4__), (d__7__), #2 (d__2__)) ) end : Fasto.UnknownTypes.FunDec))
;
(* Rule 5, file Parser.grm, line 57 *)
val _ = update_ yyact 5
(fn () => repr(let
val d__1__ = peekVal 5 : Fasto.Type
val d__2__ = peekVal 4 : string*(int*int)
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( FunDec (#1 (d__2__), (d__1__), [], (d__6__), #2 (d__2__)) ) end : Fasto.UnknownTypes.FunDec))
;
(* Rule 6, file Parser.grm, line 60 *)
val _ = update_ yyact 6
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Int ) end : Fasto.Type))
;
(* Rule 7, file Parser.grm, line 61 *)
val _ = update_ yyact 7
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Bool ) end : Fasto.Type))
;
(* Rule 8, file Parser.grm, line 62 *)
val _ = update_ yyact 8
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Char ) end : Fasto.Type))
;
(* Rule 9, file Parser.grm, line 63 *)
val _ = update_ yyact 9
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Fasto.Type
val d__3__ = peekVal 0 : (int*int)
in
( Array (d__2__) ) end : Fasto.Type))
;
(* Rule 10, file Parser.grm, line 66 *)
val _ = update_ yyact 10
(fn () => repr(let
val d__1__ = peekVal 3 : Fasto.Type
val d__2__ = peekVal 2 : string*(int*int)
val d__3__ = peekVal 1 : (int*int)
val d__4__ = peekVal 0 : Fasto.Param list
in
( Param (#1 (d__2__), (d__1__)) :: (d__4__) ) end : Fasto.Param list))
;
(* Rule 11, file Parser.grm, line 67 *)
val _ = update_ yyact 11
(fn () => repr(let
val d__1__ = peekVal 1 : Fasto.Type
val d__2__ = peekVal 0 : string*(int*int)
in
( Param (#1 (d__2__), (d__1__)) :: [] ) end : Fasto.Param list))
;
(* Rule 12, file Parser.grm, line 70 *)
val _ = update_ yyact 12
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( (Lambda
                           (Int, [Param ("x", Int),
                                        Param ("y", Int)],
                            Plus (Var ("x", (d__1__)),
                                        Var ("y", (d__1__)),
                                        (d__1__)) ,(d__1__)))
                        ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 13, file Parser.grm, line 77 *)
val _ = update_ yyact 13
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( (Lambda
                           (Int, [Param ("x", Int),
                                        Param ("y", Int)],
                            Minus (Var ("x", (d__1__)),
                                        Var ("y", (d__1__)),
                                        (d__1__)) ,(d__1__)))
                        ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 14, file Parser.grm, line 84 *)
val _ = update_ yyact 14
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( (Lambda
                           (Int, [Param ("x", Int),
                                        Param ("y", Int)],
                            Times (Var ("x", (d__1__)),
                                        Var ("y", (d__1__)),
                                        (d__1__)) ,(d__1__)))
                        ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 15, file Parser.grm, line 91 *)
val _ = update_ yyact 15
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( (Lambda
                           (Int, [Param ("x", Int),
                                        Param ("y", Int)],
                            Divide (Var ("x", (d__1__)),
                                        Var ("y", (d__1__)),
                                        (d__1__)) ,(d__1__)))
                        ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 16, file Parser.grm, line 100 *)
val _ = update_ yyact 16
(fn () => repr(let
val d__1__ = peekVal 0 : int*(int*int)
in
( Constant (IntVal (#1 (d__1__)), #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 17, file Parser.grm, line 101 *)
val _ = update_ yyact 17
(fn () => repr(let
val d__1__ = peekVal 0 : char*(int*int)
in
( Constant (CharVal (#1 (d__1__)), #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 18, file Parser.grm, line 102 *)
val _ = update_ yyact 18
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Constant (BoolVal true, (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 19, file Parser.grm, line 103 *)
val _ = update_ yyact 19
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Constant (BoolVal false, (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 20, file Parser.grm, line 104 *)
val _ = update_ yyact 20
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( Var (d__1__) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 21, file Parser.grm, line 105 *)
val _ = update_ yyact 21
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( StringLit (d__1__) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 22, file Parser.grm, line 107 *)
val _ = update_ yyact 22
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Fasto.UnknownTypes.Exp list
val d__3__ = peekVal 0 : (int*int)
in
( ArrayLit ((d__2__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 23, file Parser.grm, line 108 *)
val _ = update_ yyact 23
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Plus ((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 24, file Parser.grm, line 109 *)
val _ = update_ yyact 24
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Minus((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 25, file Parser.grm, line 110 *)
val _ = update_ yyact 25
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Times ((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 26, file Parser.grm, line 111 *)
val _ = update_ yyact 26
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Divide ((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 27, file Parser.grm, line 112 *)
val _ = update_ yyact 27
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Not ((d__2__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 28, file Parser.grm, line 113 *)
val _ = update_ yyact 28
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Negate ((d__2__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 29, file Parser.grm, line 114 *)
val _ = update_ yyact 29
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Equal((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 30, file Parser.grm, line 115 *)
val _ = update_ yyact 30
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Less ((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 31, file Parser.grm, line 116 *)
val _ = update_ yyact 31
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( And((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 32, file Parser.grm, line 117 *)
val _ = update_ yyact 32
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Or((d__1__), (d__3__), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 33, file Parser.grm, line 120 *)
val _ = update_ yyact 33
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : Fasto.UnknownTypes.Exp
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( If ((d__2__), (d__4__), (d__6__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 34, file Parser.grm, line 122 *)
val _ = update_ yyact 34
(fn () => repr(let
val d__1__ = peekVal 3 : string*(int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.UnknownTypes.Exp list
val d__4__ = peekVal 0 : (int*int)
in
( Apply (#1 (d__1__), (d__3__), #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 35, file Parser.grm, line 124 *)
val _ = update_ yyact 35
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Append ((d__1__), (d__3__), (d__2__))) end : Fasto.UnknownTypes.Exp))
;
(* Rule 36, file Parser.grm, line 127 *)
val _ = update_ yyact 36
(fn () => repr(let
val d__1__ = peekVal 2 : string*(int*int)
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : (int*int)
in
( Apply (#1 (d__1__), [], #2 (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 37, file Parser.grm, line 130 *)
val _ = update_ yyact 37
(fn () => repr(let
val d__1__ = peekVal 3 : (int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.Type
val d__4__ = peekVal 0 : (int*int)
in
( Read ((d__3__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 38, file Parser.grm, line 132 *)
val _ = update_ yyact 38
(fn () => repr(let
val d__1__ = peekVal 3 : (int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__4__ = peekVal 0 : (int*int)
in
( Write ((d__3__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 39, file Parser.grm, line 134 *)
val _ = update_ yyact 39
(fn () => repr(let
val d__1__ = peekVal 3 : (int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__4__ = peekVal 0 : (int*int)
in
( Iota ((d__3__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 40, file Parser.grm, line 136 *)
val _ = update_ yyact 40
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : (int*int)
val d__3__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 0 : (int*int)
in
( Replicate ((d__3__), (d__5__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 41, file Parser.grm, line 139 *)
val _ = update_ yyact 41
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : (int*int)
val d__3__ = peekVal 3 : Fasto.UnknownTypes.FunArg
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 0 : (int*int)
in
( Map ((d__3__), (d__5__), (), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 42, file Parser.grm, line 141 *)
val _ = update_ yyact 42
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : (int*int)
val d__3__ = peekVal 3 : Fasto.UnknownTypes.FunArg
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 0 : (int*int)
in
( Filter ((d__3__), (d__5__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 43, file Parser.grm, line 143 *)
val _ = update_ yyact 43
(fn () => repr(let
val d__1__ = peekVal 7 : (int*int)
val d__2__ = peekVal 6 : (int*int)
val d__3__ = peekVal 5 : Fasto.UnknownTypes.FunArg
val d__4__ = peekVal 4 : (int*int)
val d__5__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 2 : (int*int)
val d__7__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__8__ = peekVal 0 : (int*int)
in
( Reduce ((d__3__), (d__5__), (d__7__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 44, file Parser.grm, line 145 *)
val _ = update_ yyact 44
(fn () => repr(let
val d__1__ = peekVal 7 : (int*int)
val d__2__ = peekVal 6 : (int*int)
val d__3__ = peekVal 5 : Fasto.UnknownTypes.FunArg
val d__4__ = peekVal 4 : (int*int)
val d__5__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__6__ = peekVal 2 : (int*int)
val d__7__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__8__ = peekVal 0 : (int*int)
in
( Scan ((d__3__), (d__5__), (d__7__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 45, file Parser.grm, line 147 *)
val _ = update_ yyact 45
(fn () => repr(let
val d__1__ = peekVal 8 : (int*int)
val d__2__ = peekVal 7 : (int*int)
val d__3__ = peekVal 6 : (int*int)
val d__4__ = peekVal 5 : Fasto.UnknownTypes.FunArg
val d__5__ = peekVal 4 : (int*int)
val d__6__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__7__ = peekVal 2 : (int*int)
val d__8__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__9__ = peekVal 0 : (int*int)
in
( Reduce ((d__4__), (d__6__), (d__8__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 46, file Parser.grm, line 149 *)
val _ = update_ yyact 46
(fn () => repr(let
val d__1__ = peekVal 8 : (int*int)
val d__2__ = peekVal 7 : (int*int)
val d__3__ = peekVal 6 : (int*int)
val d__4__ = peekVal 5 : Fasto.UnknownTypes.FunArg
val d__5__ = peekVal 4 : (int*int)
val d__6__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__7__ = peekVal 2 : (int*int)
val d__8__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__9__ = peekVal 0 : (int*int)
in
( Scan ((d__4__), (d__6__), (d__8__), (), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 47, file Parser.grm, line 151 *)
val _ = update_ yyact 47
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__3__ = peekVal 0 : (int*int)
in
( (d__2__) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 48, file Parser.grm, line 153 *)
val _ = update_ yyact 48
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : string*(int*int)
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Let (Dec (#1 (d__2__), (d__4__), (d__3__)), (d__6__), (d__1__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 49, file Parser.grm, line 155 *)
val _ = update_ yyact 49
(fn () => repr(let
val d__1__ = peekVal 3 : string*(int*int)
val d__2__ = peekVal 2 : (int*int)
val d__3__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__4__ = peekVal 0 : (int*int)
in
( Index (#1 (d__1__), (d__3__), (), (d__2__)) ) end : Fasto.UnknownTypes.Exp))
;
(* Rule 50, file Parser.grm, line 157 *)
val _ = update_ yyact 50
(fn () => repr(let
val d__1__ = peekVal 6 : (int*int)
val d__2__ = peekVal 5 : Fasto.UnknownTypes.Exp
val d__3__ = peekVal 4 : (int*int)
val d__4__ = peekVal 3 : (string*Fasto.UnknownTypes.Exp) list
val d__5__ = peekVal 2 : (int*int)
val d__6__ = peekVal 1 : Fasto.UnknownTypes.Exp list
val d__7__ = peekVal 0 : (int*int)
in
(ArrCompr ((d__2__),(d__4__),(d__6__),(),[],(d__1__))) end : Fasto.UnknownTypes.Exp))
;
(* Rule 51, file Parser.grm, line 158 *)
val _ = update_ yyact 51
(fn () => repr(let
val d__1__ = peekVal 4 : (int*int)
val d__2__ = peekVal 3 : Fasto.UnknownTypes.Exp
val d__3__ = peekVal 2 : (int*int)
val d__4__ = peekVal 1 : (string*Fasto.UnknownTypes.Exp) list
val d__5__ = peekVal 0 : (int*int)
in
(ArrCompr ((d__2__),(d__4__),[],(),[],(d__1__))) end : Fasto.UnknownTypes.Exp))
;
(* Rule 52, file Parser.grm, line 162 *)
val _ = update_ yyact 52
(fn () => repr(let
val d__1__ = peekVal 4 : (int*int)
val d__2__ = peekVal 3 : string*(int*int)
val d__3__ = peekVal 2 : (int*int)
val d__4__ = peekVal 1 : Fasto.UnknownTypes.Exp
val d__5__ = peekVal 0 : (int*int)
in
((#1 (d__2__) ,(d__4__))) end : (string*Fasto.UnknownTypes.Exp)))
;
(* Rule 53, file Parser.grm, line 167 *)
val _ = update_ yyact 53
(fn () => repr(let
val d__1__ = peekVal 2 : (string*Fasto.UnknownTypes.Exp)
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : (string*Fasto.UnknownTypes.Exp) list
in
((d__1__) :: (d__3__)) end : (string*Fasto.UnknownTypes.Exp) list))
;
(* Rule 54, file Parser.grm, line 168 *)
val _ = update_ yyact 54
(fn () => repr(let
val d__1__ = peekVal 0 : (string*Fasto.UnknownTypes.Exp)
in
((d__1__) :: []) end : (string*Fasto.UnknownTypes.Exp) list))
;
(* Rule 55, file Parser.grm, line 173 *)
val _ = update_ yyact 55
(fn () => repr(let
val d__1__ = peekVal 2 : Fasto.UnknownTypes.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Fasto.UnknownTypes.Exp list
in
( (d__1__) :: (d__3__) ) end : Fasto.UnknownTypes.Exp list))
;
(* Rule 56, file Parser.grm, line 174 *)
val _ = update_ yyact 56
(fn () => repr(let
val d__1__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( (d__1__) :: [] ) end : Fasto.UnknownTypes.Exp list))
;
(* Rule 57, file Parser.grm, line 177 *)
val _ = update_ yyact 57
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( FunName (#1 (d__1__)) ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 58, file Parser.grm, line 178 *)
val _ = update_ yyact 58
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : Fasto.Type
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : (int*int)
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Lambda ( (d__2__), [], (d__6__), (d__1__) )  ) end : Fasto.UnknownTypes.FunArg))
;
(* Rule 59, file Parser.grm, line 179 *)
val _ = update_ yyact 59
(fn () => repr(let
val d__1__ = peekVal 6 : (int*int)
val d__2__ = peekVal 5 : Fasto.Type
val d__3__ = peekVal 4 : (int*int)
val d__4__ = peekVal 3 : Fasto.Param list
val d__5__ = peekVal 2 : (int*int)
val d__6__ = peekVal 1 : (int*int)
val d__7__ = peekVal 0 : Fasto.UnknownTypes.Exp
in
( Lambda ( (d__2__), (d__4__), (d__7__), (d__1__) ) ) end : Fasto.UnknownTypes.FunArg))
;
(* Entry Prog *)
val _ = update_ yyact 60 (fn () => raise yyexit (peekVal 0));
val yytables : parseTables =
  ( yyact,
    yytransl,
    yylhs,
    yylen,
    yydefred,
    yydgoto,
    yysindex,
    yyrindex,
    yygindex,
    YYTABLESIZE,
    yytable,
    yycheck );
fun Prog lexer lexbuf = yyparse yytables 1 lexer lexbuf;
