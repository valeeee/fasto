//this will be used in the size function for counting the element array 
fun int incr (int x, int y) = x+y

//this functions returns the greatest value of a and b
fun int max (int a, int b) = if (b < a) then a else b 

fun [int] writeIntArr([int] x) = map(writeInt, x)

fun  int  writeInt  ( int i ) = 
        let s = write ("\t") in
        let y = write (i) in 
        let z = write ("\t") in y

//create an array with all elements with column 1
fun [int] ones ([int] a) = let result = 0 in map (fn int (int x) => result+1, a)

//this calcuate the size of the array a
fun int size ([int] a) = reduce (incr, 0, ones(a))

//this calculate the length of each row in the bidimensional array b
fun [int] sizeB ([[int]] b) = map (fn int ([int] x) => size (x), b)

//this calcuate the module 
fun int mod (int n, int q) = n - ((n/q)*q)

//this function take a as array and returns the greatest value in the array
fun int maxArr ([int] a) = reduce (max, a[0], a)

//this function return an array with in a[0] the row index and in a[1] the column index
fun [int] getIndex (int index, [[int]] array) = 
  let s = sizeB(array) in
    let m = mod(index,s[0]) in 
        let row = (index/s[0])+1 in 
             let column = m+1 in 
                {row, column}

//this functions returns i+j
fun int getPlusIndex ([int] array) = 
     array[0]+array[1]

//returns the value in the bidimensional array correspondant to the index {i,j} 
//where i is the row and j is the column. 
//Mind that i and j doesn't start from 0 (as index array in Fasto)
fun int getValue ([int] index, [[int]] array) = 
    let i = index[0]-1 in
        let row = array[i] in
                let column = index[1]-1 in 
                     row[column] 

fun int checkValue ([int] index, [[int]] array) = 
        let value =  getValue({index[0], index[1]}, array) in 
                        if value == 0 then 1 else 0 

//returns 1 if j and j are the same value. 
fun int diagIndex ([int] index) = 
    if index[0] == index [1] then 1 else 0

//this works only for squared matrix 
fun int maxIndex ([[int]] matrix) =  
    size(sizeB(matrix))*maxArr(sizeB(matrix)) //rownumber*the max of the column numbers basically the size of the matrix


fun [[int]] createPosMatrix ([[int]] matrix) = 
    map (fn [int] (int i) => 
        getIndex(i,matrix), iota(maxIndex(matrix)))


fun [[int]] diagIndexScan ([[int]] matrix) = 
    let pos = createPosMatrix(matrix) in 
        map (fn [int] ([int] x) => if x[0] == x [1] then 1::x else 0::x, pos) 

fun int checkResult (int x, int i) = 
    if (x==1 && i==1) then 1 else 0

fun int product (int a, int b) = 
    a*b
fun int signAlgebComplement (int i) = 
 if (mod(i,2) == 0) then 1 else ~1



//return a partion of the matrix by row, where s is the number of requested rows
fun [[int]] rowselection ([[int]] matrix, int s, int indexRow) = 
           map (fn [int] (int x) => matrix[indexRow+x], iota(s))

fun [[int]] firstRowBlock ([[int]] matrix, int s, int indexRow) = 
   if s < 1 then secondRowBlock (matrix, s, indexRow) else
   rowselection (matrix, s, 0) 
        
fun [[int]] secondRowBlock ([[int]] matrix, int s, int indexRow) = 
  if s < 1 then {{0000000000000000000}} else
   rowselection (matrix, s, indexRow) 

fun [[[int]]] composeBlocks ([[int]] matrix, int index) = 
 let address = getIndex(index, matrix) in 
  let firstRows = address[0]-1 in //address[0]-1 as I need to take all the rows before the index
    let secondRows = size(sizeB(matrix))-firstRows-1 in 
     let b1 = firstRowBlock (matrix, firstRows, 0) in 
       let b2 = secondRowBlock (matrix, secondRows, firstRows+1) in 
          map (fn [[int]]([int] x) => x::b2, b1)
        



// fun int determinant (matrix, index) = 
//  let address = getIndex (index, matrix)  in 
    
fun [[[int]]] main () = 
    let matrix = {{2,0,0,0}, {0,222,0,0}, {0,0,1,0}, {0,0,0,1}} in 
        composeBlocks(matrix, 4)

        //   let address = getIndex (index, matrix) in 
        //  //getPlusIndex = i+j
        //    let iPlusj =  getPlusIndex(address) in 
        //  let sign = signAlgebComplement(iPlusj) in 
        //   sign*determinant(matrix, index)
        //composeBlocks (matrix, index)

//instead of calculate (-1)^(i+j) this function 
//returns 1 if i+j is even or -1 if i+j is odd
// fun int main () = 
//     let i = signAlgebComplement(3) in 
//         write(i) //i sarebbe la sequenza di 1 e -1 da moltiplicare per il minore complementare